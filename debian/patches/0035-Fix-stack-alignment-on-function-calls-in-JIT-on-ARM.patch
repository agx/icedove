From: Mike Hommey <mh@glandium.org>
Date: Sun, 14 Feb 2010 11:29:45 +0100
Subject: [PATCH] Fix stack alignment on function calls in JIT on ARM

https://bugzilla.mozilla.org/show_bug.cgi?id=545747
---
 mozilla/js/src/nanojit/NativeARM.cpp |   16 +++++++++-------
 mozilla/js/src/nanojit/NativeARM.h   |    3 ++-
 2 files changed, 11 insertions(+), 8 deletions(-)

diff --git a/mozilla/js/src/nanojit/NativeARM.cpp b/mozilla/js/src/nanojit/NativeARM.cpp
index bcb4bb8..369ffcb 100644
--- a/mozilla/js/src/nanojit/NativeARM.cpp
+++ b/mozilla/js/src/nanojit/NativeARM.cpp
@@ -80,6 +80,7 @@ const Register Assembler::savedRegs[] = { R4, R5, R6, R7, R8, R9, R10 };
 void
 Assembler::nInit(AvmCore*)
 {
+    max_out_args = 0;
 }
 
 NIns*
@@ -91,7 +92,7 @@ Assembler::genPrologue()
 
     // NJ_RESV_OFFSET is space at the top of the stack for us
     // to use for parameter passing (8 bytes at the moment)
-    uint32_t stackNeeded = STACK_GRANULARITY * _activation.highwatermark + NJ_STACK_OFFSET;
+    uint32_t stackNeeded = max_out_args + STACK_GRANULARITY * _activation.highwatermark + NJ_STACK_OFFSET;
     uint32_t savingCount = 2;
 
     uint32_t savingMask = rmask(FP) | rmask(LR);
@@ -228,7 +229,6 @@ Assembler::asm_arg(ArgSize sz, LInsp arg, Register& r, int& stkd)
         // if we're about to put this on the stack, make sure the
         // stack is 64-bit aligned
         if (r == UnknownReg && (stkd&7) != 0) {
-            SUBi(SP, SP, 4);
             stkd += 4;
         }
 #endif
@@ -253,7 +253,7 @@ Assembler::asm_arg(ArgSize sz, LInsp arg, Register& r, int& stkd)
                         if (r == R4)
                             r = UnknownReg;
                     } else {
-                        STR_preindex(IP, SP, -4);
+                        STR(IP, SP, stkd);
                         asm_ld_imm(IP, *p++);
                         stkd += 4;
                     }
@@ -268,7 +268,7 @@ Assembler::asm_arg(ArgSize sz, LInsp arg, Register& r, int& stkd)
                         if (r == R4)
                             r = UnknownReg;
                     } else {
-                        STR_preindex(IP, SP, -4);
+                        STR(IP, SP, stkd);
                         LDR(IP, FP, d + k*4);
                         stkd += 4;
                     }
@@ -287,7 +287,7 @@ Assembler::asm_arg(ArgSize sz, LInsp arg, Register& r, int& stkd)
                     r = UnknownReg;
             } else if (r == R3) {
                 // legacy ABI only
-                STR_preindex(IP, SP, -4);
+                STR(IP, SP, 0);
                 FMRDL(IP, sr);
                 FMRDH(r, sr);
                 stkd += 4;
@@ -295,7 +295,6 @@ Assembler::asm_arg(ArgSize sz, LInsp arg, Register& r, int& stkd)
                 r = UnknownReg;
             } else {
                 FSTD(sr, SP, 0);
-                SUB(SP, SP, 8);
                 stkd += 8;
                 r = UnknownReg;
             }
@@ -329,7 +328,7 @@ Assembler::asm_arg(ArgSize sz, LInsp arg, Register& r, int& stkd)
                 r = UnknownReg;
         } else {
             int d = findMemFor(arg);
-            STR_preindex(IP, SP, -4);
+            STR(IP, SP, stkd);
             if (arg->isop(LIR_alloc)) {
                 asm_add_imm(IP, FP, d);
             } else {
@@ -410,6 +409,9 @@ Assembler::asm_call(LInsp ins)
 
         asm_arg(sz, arg, r, stkd);
     }
+    if (stkd > max_out_args) {
+        max_out_args = stkd;
+    }
 }
 
 void
diff --git a/mozilla/js/src/nanojit/NativeARM.h b/mozilla/js/src/nanojit/NativeARM.h
index 011be6c..700ff21 100644
--- a/mozilla/js/src/nanojit/NativeARM.h
+++ b/mozilla/js/src/nanojit/NativeARM.h
@@ -195,7 +195,8 @@ verbose_only( extern const char* shiftNames[]; )
     void asm_ld_imm(Register d, int32_t imm);                           \
     void asm_arg(ArgSize sz, LInsp arg, Register& r, int& stkd);        \
     int* _nSlot;                                                        \
-    int* _nExitSlot;
+    int* _nExitSlot;                                                    \
+    int max_out_args;
 
 
 //printf("jmp_l_n count=%d, nins=%X, %X = %X\n", (_c), nins, _nIns, ((intptr_t)(nins+(_c))-(intptr_t)_nIns - 4) );
-- 
