From: Mike Hommey <mh+mozilla@glandium.org>
Date: Thu, 26 Aug 2010 15:51:29 +0200
Subject: Avoid some ARM CPU arch related runtime tests depending on the build target.

https://bugzilla.mozilla.org/show_bug.cgi?id=585604
---
 mozilla/js/src/nanojit/NativeARM.cpp |   10 +++++-----
 mozilla/js/src/nanojit/NativeARM.h   |    2 +-
 mozilla/js/src/nanojit/avmplus.h     |    9 +++++++--
 3 files changed, 13 insertions(+), 8 deletions(-)

diff --git a/mozilla/js/src/nanojit/NativeARM.cpp b/mozilla/js/src/nanojit/NativeARM.cpp
index ba08eea..13fa1a6 100644
--- a/mozilla/js/src/nanojit/NativeARM.cpp
+++ b/mozilla/js/src/nanojit/NativeARM.cpp
@@ -120,7 +120,7 @@ Assembler::CountLeadingZeroes(uint32_t data)
     // run-time check on config.arch and fall back to the C routine, but for
     // now we can avoid the cost of the check as we don't intend to support
     // ARMv4 anyway.
-    NanoAssert(ARM_ARCH >= 5);
+    NanoAssert(ARM_ARCH_AT_LEAST(5));
 
 #if defined(__ARMCC__)
     // ARMCC can do this with an intrinsic.
@@ -551,7 +551,7 @@ Assembler::genEpilogue()
 {
     // On ARMv5+, loading directly to PC correctly handles interworking.
     // Note that we don't support anything older than ARMv5.
-    NanoAssert(ARM_ARCH >= 5);
+    NanoAssert(ARM_ARCH_AT_LEAST(5));
 
     RegisterMask savingMask = rmask(FP) | rmask(PC);
 
@@ -1505,7 +1505,7 @@ Assembler::BranchWithLink(NIns* addr)
             // We need to emit an ARMv5+ instruction, so assert that we have a
             // suitable processor. Note that we don't support ARMv4(T), but
             // this serves as a useful sanity check.
-            NanoAssert(ARM_ARCH >= 5);
+            NanoAssert(ARM_ARCH_AT_LEAST(5));
 
             // The (pre-shifted) value of the "H" bit in the BLX encoding.
             uint32_t    H = (offs & 0x2) << 23;
@@ -1532,7 +1532,7 @@ Assembler::BLX(Register addr, bool chk /* = true */)
     // We need to emit an ARMv5+ instruction, so assert that we have a suitable
     // processor. Note that we don't support ARMv4(T), but this serves as a
     // useful sanity check.
-    NanoAssert(ARM_ARCH >= 5);
+    NanoAssert(ARM_ARCH_AT_LEAST(5));
 
     NanoAssert(IsGpReg(addr));
 #ifdef UNDER_CE
@@ -2165,7 +2165,7 @@ Assembler::asm_arith(LInsp ins)
             // common for (rr == ra) and is thus likely to be the most
             // efficient case; if ra is no longer used after this LIR
             // instruction, it is re-used for the result register (rr).
-            if ((ARM_ARCH > 5) || (rr != rb)) {
+            if ((ARM_ARCH_AT_LEAST(6)) || (rr != rb)) {
                 // Newer cores place no restrictions on the registers used in a
                 // MUL instruction (compared to other arithmetic instructions).
                 MUL(rr, rb, ra);
diff --git a/mozilla/js/src/nanojit/NativeARM.h b/mozilla/js/src/nanojit/NativeARM.h
index ce03c0a..a0b0b87 100644
--- a/mozilla/js/src/nanojit/NativeARM.h
+++ b/mozilla/js/src/nanojit/NativeARM.h
@@ -460,7 +460,7 @@ enum {
 // _d = _l * _r
 #define MUL(_d,_l,_r)  do {                                  \
         underrunProtect(4);                                                 \
-        NanoAssert((ARM_ARCH >= 6) || ((_d) != (_l)));                      \
+        NanoAssert((ARM_ARCH_AT_LEAST(6)) || ((_d) != (_l)));                      \
         NanoAssert(IsGpReg(_d) && IsGpReg(_l) && IsGpReg(_r));              \
         NanoAssert(((_d) != PC) && ((_l) != PC) && ((_r) != PC));           \
         *(--_nIns) = (NIns)( COND_AL | (_d)<<16 | (_r)<<8 | 0x90 | (_l) );  \
diff --git a/mozilla/js/src/nanojit/avmplus.h b/mozilla/js/src/nanojit/avmplus.h
index e86f22e..76370f5 100644
--- a/mozilla/js/src/nanojit/avmplus.h
+++ b/mozilla/js/src/nanojit/avmplus.h
@@ -53,10 +53,15 @@
 #include "njcpudetect.h"
 
 #ifdef AVMPLUS_ARM
-#define ARM_ARCH   config.arch
+#ifdef DEBUG
+#define ARM_ARCH_AT_LEAST(wanted) (config.arch >= (wanted))
 #define ARM_VFP    config.vfp
+#else
+#define ARM_ARCH_AT_LEAST(wanted) \
+    ((NJ_COMPILER_ARM_ARCH >= (wanted)) || (config.arch >= (wanted)))
+#define ARM_VFP ((NJ_COMPILER_ARM_ARCH >= 7) || (config.vfp))
+#endif
 #define ARM_THUMB2 config.thumb2
-
 #endif
 
 #if !defined(AVMPLUS_LITTLE_ENDIAN) && !defined(AVMPLUS_BIG_ENDIAN)
-- 
