From: Christoph Goehre <chris@sigxcpu.org>
Date: Fri, 27 Aug 2010 19:37:25 +0200
Subject: [PATCH] fix FTBFS on hurd

GNU/Hurd didn't provide SA_SIGINFO in signal.h

extended Patch from Samuel Thibault <sthibault@debian.org>

Closes: #595665
---
 .../dirserviceprovider/src/nsProfileLock.cpp       |   13 +++++++++++--
 .../profile/dirserviceprovider/src/nsProfileLock.h |    7 +++++--
 mozilla/toolkit/xre/nsSigHandlers.cpp              |    4 ++++
 3 files changed, 20 insertions(+), 4 deletions(-)

diff --git a/mozilla/profile/dirserviceprovider/src/nsProfileLock.cpp b/mozilla/profile/dirserviceprovider/src/nsProfileLock.cpp
index 4eeb256..e235454 100644
--- a/mozilla/profile/dirserviceprovider/src/nsProfileLock.cpp
+++ b/mozilla/profile/dirserviceprovider/src/nsProfileLock.cpp
@@ -159,8 +159,11 @@ static struct sigaction SIGABRT_oldact;
 static struct sigaction SIGSEGV_oldact;
 static struct sigaction SIGTERM_oldact;
 
-void nsProfileLock::FatalSignalHandler(int signo, siginfo_t *info,
-                                       void *context)
+void nsProfileLock::FatalSignalHandler(int signo
+#ifdef SA_SIGINFO
+                                       , siginfo_t *info, void *context
+#endif
+                                       )
 {
     // Remove any locks still held.
     RemovePidLockFiles();
@@ -212,10 +215,12 @@ void nsProfileLock::FatalSignalHandler(int signo, siginfo_t *info,
 
             raise(signo);
         }
+#ifdef SA_SIGINFO
         else if (oldact->sa_sigaction &&
                  (oldact->sa_flags & SA_SIGINFO) == SA_SIGINFO) {
             oldact->sa_sigaction(signo, info, context);
         }
+#endif
         else if (oldact->sa_handler && oldact->sa_handler != SIG_IGN)
         {
             oldact->sa_handler(signo);
@@ -392,8 +397,12 @@ nsresult nsProfileLock::LockWithSymlink(const nsACString& lockFilePath, PRBool a
                 // because mozilla is run via nohup.
                 if (!sDisableSignalHandling) {
                     struct sigaction act, oldact;
+#ifdef SA_SIGINFO
                     act.sa_sigaction = FatalSignalHandler;
                     act.sa_flags = SA_SIGINFO;
+#else
+                    act.sa_handler = FatalSignalHandler;
+#endif
                     sigfillset(&act.sa_mask);
 
 #define CATCH_SIGNAL(signame)                                           \
diff --git a/mozilla/profile/dirserviceprovider/src/nsProfileLock.h b/mozilla/profile/dirserviceprovider/src/nsProfileLock.h
index 78471d1..f46c1c7 100644
--- a/mozilla/profile/dirserviceprovider/src/nsProfileLock.h
+++ b/mozilla/profile/dirserviceprovider/src/nsProfileLock.h
@@ -93,8 +93,11 @@ private:
     LHANDLE                 mLockFileHandle;
 #elif defined (XP_UNIX)
     static void             RemovePidLockFiles();
-    static void             FatalSignalHandler(int signo, siginfo_t *info,
-                                               void *context);
+    static void             FatalSignalHandler(int signo
+#ifdef SA_SIGINFO
+                                               , siginfo_t *info, void *context
+#endif
+                                               );
     static PRCList          mPidLockList;
 
     nsresult                LockWithFcntl(const nsACString& lockFilePath);
diff --git a/mozilla/toolkit/xre/nsSigHandlers.cpp b/mozilla/toolkit/xre/nsSigHandlers.cpp
index b928d66..1eb0ead 100644
--- a/mozilla/toolkit/xre/nsSigHandlers.cpp
+++ b/mozilla/toolkit/xre/nsSigHandlers.cpp
@@ -215,6 +215,7 @@ my_glib_log_func(const gchar *log_domain, GLogLevelFlags log_level,
 
 #endif
 
+#ifdef SA_SIGINFO
 static void fpehandler(int signum, siginfo_t *si, void *context)
 {
 #ifdef XP_MACOSX
@@ -261,6 +262,7 @@ static void fpehandler(int signum, siginfo_t *si, void *context)
 #endif
 #endif
 }
+#endif // SA_SIGINFO
 
 void InstallSignalHandlers(const char *ProgramName)
 {
@@ -293,12 +295,14 @@ void InstallSignalHandlers(const char *ProgramName)
   }
 #endif // CRAWL_STACK_ON_SIGSEGV
 
+#ifdef SA_SIGINFO
   /* Install a handler for floating point exceptions and disable them if they occur. */
   struct sigaction sa, osa;
   sa.sa_flags = SA_ONSTACK | SA_RESTART | SA_SIGINFO;
   sa.sa_sigaction = fpehandler;
   sigemptyset(&sa.sa_mask);
   sigaction(SIGFPE, &sa, &osa);
+#endif
 
 #if defined(DEBUG) && defined(LINUX)
   const char *memLimit = PR_GetEnv("MOZ_MEM_LIMIT");
-- 
