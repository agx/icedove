<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
  - Version: MPL 1.1/GPL 2.0/LGPL 2.1
  -
  - The contents of this file are subject to the Mozilla Public License Version
  - 1.1 (the "License"); you may not use this file except in compliance with
  - the License. You may obtain a copy of the License at
  - http://www.mozilla.org/MPL/
  -
  - Software distributed under the License is distributed on an "AS IS" basis,
  - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  - for the specific language governing rights and limitations under the
  - License.
  -
  - The Original Code is Mozilla Communicator client code, released
  - March 31, 1998.
  -
  - The Initial Developer of the Original Code is
  - Netscape Communications Corporation.
  - Portions created by the Initial Developer are Copyright (C) 1998-1999
  - the Initial Developer. All Rights Reserved.
  -
  - Contributor(s):
  -   Scott MacGregor <mscott@mozilla.org>
  -   Andrew Sutherland <asutherland@asutherland.org>
  -   David Ascher <dascher@mozillamessaging.com>
  -   Thomas DÃ¼llmann <bugzilla2009@duellmann24.net>
  -
  - Alternatively, the contents of this file may be used under the terms of
  - either of the GNU General Public License Version 2 or later (the "GPL"),
  - or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  - in which case the provisions of the GPL or the LGPL are applicable instead
  - of those above. If you wish to allow use of your version of this file only
  - under the terms of either the GPL or the LGPL, and not to allow others to
  - use your version of this file under the terms of the MPL, indicate your
  - decision by deleting the provisions above and replace them with the notice
  - and other provisions required by the GPL or the LGPL. If you do not delete
  - the provisions above, a recipient may use your version of this file under
  - the terms of any one of the MPL, the GPL or the LGPL.
  - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings [
<!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
%globalDTD;
<!ENTITY % messengerDTD SYSTEM "chrome://messenger/locale/messenger.dtd">
%messengerDTD;
]>

<bindings id="SearchBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:html="http://www.w3.org/1999/xhtml"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   xmlns:xbl="http://www.mozilla.org/xbl">

  <!--
    - The glodaSearch binding implements a gloda-backed search mechanism.  The
    -  actual search logic comes from the glodaFacet tab mode in the
    -  glodaFacetTabType definition.  This binding serves as a means to display
    -  and alter the current search query if a "glodaFacet" tab is displayed,
    -  or enter a search query and spawn a new "glodaFacet" tab if one is
    -  currently not displayed.
    -->
  <binding id="glodaSearch" extends="chrome://global/content/bindings/autocomplete.xml#autocomplete">
    <resources>
      <stylesheet src="chrome://messenger/skin/searchBox.css"/>
    </resources>

    <content>
      <xul:button anonid="quick-search-button" class="quick-search-button" type="menu" chromedir="&locale.dir;">
        <xul:menupopup anonid="quick-search-menupopup"
                   class="quick-search-menupopup"
                   persist="value"
                   onpopupshowing="this.parentNode.parentNode.updatePopup();"
                   popupalign="topleft"
                   popupanchor="bottomleft">
          <xul:menuitem anonid="searchGlobalMenu"
                    class="quick-search-menu"
                    value="global"
                    glodaOnly="true"
                    label="&searchAllMessages.label;"
                    type="radio"
                    oncommand="this.parentNode.parentNode.parentNode.changeMode(this)"/>
          <xul:menuseparator quicksearchOnly="true"
                             glodaOnly="true"/>
        </xul:menupopup>
      </xul:button>
      <xul:hbox class="quick-search-textbox textbox-input-box" flex="1">
        <html:input class="textbox-input" flex="1" anonid="input" allowevents="true"
                    xbl:inherits="onfocus,onblur,oninput,value,type,maxlength,disabled,size,readonly,tabindex,accesskey"/>
      </xul:hbox>
      <xul:toolbarbutton anonid="quick-search-clearbutton" xbl:inherits=""
                         disabled="true" class="quick-search-clearbutton"
                         onclick="this.parentNode.value = ''; this.parentNode.doSearch(); this.parentNode.select(); return false;"
                         chromedir="&locale.dir;"/>
                         <!--XXX update search if not global-->

    </content>
    <handlers>
      <handler event="input">
        <![CDATA[
        try {
          if (this.searchMode != "global") { // it's a quick search
            let dis = this;
            clearTimeout(this.timeoutHandler);
            this.timeoutHandler = setTimeout(this.onTimeout, this.timeout, dis);
          }
        } catch (e) {
          logException(e);
        }
        ]]>
      </handler>
      <!-- For the next two, we need to get in on the bubbling phase, as
           otherwise we'll be doing searches when autocomplete results are
           being selected. -->
      <handler event="keypress" keycode="VK_ENTER"
        phase="bubbling" action="return this.doSearch();"/>
      <handler event="keypress" keycode="VK_RETURN"
        phase="bubbling">
        <![CDATA[
          try {
            this.doSearch();
          } catch (e) {
            logException(e);
          }
          return true;
        ]]>
      </handler>
      <handler event="input">
        <![CDATA[
          if (!this.value)
            this.clearButtonHidden = true;
          else
            this.clearButtonHidden = false;
        ]]></handler>
      <handler event="keypress" keycode="VK_DOWN" modifiers="alt"
               phase="capturing" action="return this.openmenupopup();"/>
      <handler event="keypress" keycode="VK_UP"   modifiers="alt"
               phase="capturing" action="return this.openmenupopup();"/>
      <handler event="keypress" keycode="VK_F4" phase="capturing"><![CDATA[
        if (window.navigator.oscpu.substring(0, 3).toLowerCase() != "mac")
          return this.openmenupopup();
      ]]></handler>

      <handler event="keypress" keycode="VK_UP" modifiers="control"
               phase="capturing">
        <![CDATA[
        try {
          var menuPopupValue = this.menupopup.getAttribute('value');
          var menuItem =
            this.menupopup.getElementsByAttribute('value', this.searchMode)[0];
          if (menuItem != this.menupopup.firstChild) {
            let previousMenuItem = menuItem.previousSibling;
            while (! previousMenuItem.hasAttribute("value") &&
                   previousMenuItem != this.menupopup.firstChild)
              previousMenuItem = previousMenuItem.previousSibling;

            previousMenuItem.setAttribute("checked", "true");
            menuItem.removeAttribute("checked");
            this.searchMode = previousMenuItem.getAttribute('value');
            this.menupopup.setAttribute('value', this.searchMode);
          }
          return false;
        } catch (e) {
          logException(e);
        }
        ]]></handler>

      <handler event="keypress" keycode="VK_DOWN" modifiers="control"
               phase="capturing">
        <![CDATA[
        try {
          var menuPopupValue = this.menupopup.getAttribute('value');
          var menuItem =
            this.menupopup.getElementsByAttribute('value', this.searchMode)[0];
          if (menuItem != this.menupopup.lastChild) {
            let nextMenuItem = menuItem.nextSibling;
            while (! nextMenuItem.hasAttribute("value") &&
                   nextMenuItem != this.menupopup.lastChild)
              nextMenuItem = nextMenuItem.nextSibling;
            nextMenuItem.setAttribute("checked", "true");
            menuItem.removeAttribute("checked");
            this.searchMode = nextMenuItem.getAttribute('value');
            this.menupopup.setAttribute('value', this.searchMode);
          }
          return false;
        } catch (e) {
          logException(e);
        }
        ]]></handler>


      <handler event="drop" phase="capturing">
        nsDragAndDrop.drop(event, this.searchInputDNDObserver);
      </handler>
    </handlers>

    <implementation implements="nsIObserver">
      <constructor><![CDATA[
        const Cc = Components.classes;
        const Ci = Components.interfaces;
        const Cu = Components.utils;
        Cu.import("resource://app/modules/errUtils.js");
        try {
          Cu.import("resource://app/modules/StringBundle.js");
          Cu.import("resource://app/modules/quickSearchManager.js");

          var prefBranch =
              Components.classes['@mozilla.org/preferences-service;1'].
              getService(Components.interfaces.nsIPrefBranch2);
          this.glodaCompleter =
            Components.classes["@mozilla.org/autocomplete/search;1?name=gloda"]
                      .getService()
                      .wrappedJSObject;
          var observerSvc = Cc["@mozilla.org/observer-service;1"]
                            .getService(Ci.nsIObserverService);

          if ((typeof gSearchInputObserversRegistered != "undefined" &&
              gSearchInputObserversRegistered == false)) {
            // due to a bug in XBL that means that destructors don't get
            // called reliably, the customize toolbar path will end up creating
            // two clones of this widget, and never destroy them.  So the destructor
            // isn't reliably called, and so we must use a global to avoid
            // registering ourselves for the same event multiple times (twice
            // per invocation of the customize-toolbar).

            // We need to test for undefined above because if the widget is
            // created from the customize toolbar, its namespace won't include
            // a definition of gSearchInputObserversRegistered -- and we don't
            // care, since we don't want to register observers in that scope.

            prefBranch.addObserver("mailnews.database.global.indexer.enabled",
                                   this._prefObserver, false);
            observerSvc.addObserver(this, "autocomplete-did-enter-text", false);
            gSearchInputObserversRegistered = true;
          }

          this.quickSearchStrings =
            new StringBundle(
              "chrome://messenger/locale/quickSearch.properties");

          let quickSearchModes = QuickSearchManager.getSearchModes();
          for (let i = 0; i < quickSearchModes.length; i++) {
            let searchMode = quickSearchModes[i];
            let value = searchMode["value"];
            let label = searchMode["label"];
            let menuitem = document.createElement("menuitem");
            menuitem.setAttribute("value", value.toString());
            menuitem.setAttribute("label", label);
            menuitem.setAttribute("type", "radio");
            menuitem.setAttribute("quicksearchOnly", "true");
            menuitem.setAttribute("oncommand",
              "this.parentNode.parentNode.parentNode.changeMode(this)");
            this.menupopup.appendChild(menuitem);
          }

          let separator = document.createElement("menuseparator");
          separator.setAttribute("quicksearchOnly", "true");
          this.menupopup.appendChild(separator);

          let saveAsVF = document.createElement("menuitem");
          saveAsVF.setAttribute("anonid",
                                "quick-search-save-as-virtual-folder");
          saveAsVF.setAttribute("label",
            this.quickSearchStrings.get("saveAsVirtualFolder.label"));
          saveAsVF.setAttribute("quicksearchOnly", "true");
          saveAsVF.setAttribute("oncommand",
            "gFolderTreeController.newVirtualFolder(\
              this.parentNode.parentNode.parentNode.value,\
              gFolderDisplay.view.search.session.searchTerms);");
          this.menupopup.appendChild(saveAsVF);

          this.updateSaveItem();
          this.input = "";
          this.glodaEnabled =
            prefBranch.getBoolPref("mailnews.database.global.indexer.enabled");
          this.searchMode = this.glodaEnabled ? "global" :
            quickSearchModes[QuickSearchConstants.kQuickSearchFromOrSubject]
              .value.toString();
        } catch (e) {
          logException(e, true);
        }
      ]]></constructor>

      <destructor>
        <![CDATA[
          var prefBranch =
              Components.classes['@mozilla.org/preferences-service;1'].
              getService(Components.interfaces.nsIPrefBranch);
          prefBranch.removeObserver("mailnews.database.global.indexer.enabled",
                                    this._prefObserver);
          var observerSvc = Components.classes["@mozilla.org/observer-service;1"]
                            .getService(Components.interfaces.nsIObserverService);
          observerSvc.removeObserver(this, "autocomplete-did-enter-text");
        ]]>
      </destructor>

      <field name="_prefObserver">({
        inputSearch: this,
        observe: function(subject, topic, data)
        {
          if (topic == "nsPref:changed") {
            subject.QueryInterface(Components.interfaces.nsIPrefBranch);
            switch (data) {
            case "mailnews.database.global.indexer.enabled":
              this.inputSearch.glodaEnabled =
                gPrefBranch.getBoolPref(
                  "mailnews.database.global.indexer.enabled");
              let quickSearchModes = QuickSearchManager.getSearchModes();
              this.inputSearch.searchMode = this.inputSearch.glodaEnabled ?
                "global" :
                quickSearchModes[QuickSearchConstants.kQuickSearchFromOrSubject]
                  .value.toString();
              break;
            }
          }
        },

        QueryInterface: function(aIID)
        {
          if (aIID.equals(Components.interfaces.nsIObserver) ||
              aIID.equals(Components.interfaces.nsISupports))
            return this;
          throw Components.results.NS_NOINTERFACE;
        }
        });
      </field>
      <field name="timeout">200</field>
      <field name="glodaCompleter">null</field>
      <field name="ignoreClick">false</field>
      <field name="quickSearchStrings">null</field>
      <field name="mQuickSearchMode">null</field>
      <field name="timeoutHandler">null</field>
      <property name="searchMode">
        <getter><![CDATA[
          return this.mQuickSearchMode;
        ]]></getter>
        <setter><![CDATA[
          this.mQuickSearchMode = val;
          this.menupopup.setAttribute('value', val);
          let tabmail = document.getElementById('tabmail');
          if (tabmail) { /* if not in the customize toolbar */
            let currentTabInfo = tabmail.currentTabInfo;
            this.menupopup.getElementsByAttribute('value', this.searchMode)[0]
                          .setAttribute('checked', 'true');
            if (currentTabInfo)
             currentTabInfo.searchMode = this.searchMode;
            this.updateEmptyText();
          }
          this.setAttribute("autocompletesearchparam", val)
        ]]></setter>
      </property>
      <field name="_glodaEnabled"/>
      <property name="glodaEnabled">
        <getter><![CDATA[
          return this._glodaEnabled
        ]]></getter>
        <setter><![CDATA[
          try {
            this.showGlodaItems(val); this._glodaEnabled = val;
          } catch(e) {
            logException(e);
          }
        ]]></setter>
      </property>
      <property name="autocompletePopup" readonly="true">
        <getter><![CDATA[
          return document.getElementById(
                   this.getAttribute('autocompletepopup'));
        ]]></getter>
      </property>
      <property name="showingSearchCriteria">
        <getter><![CDATA[
          return this.getAttribute('searchCriteria') == 'true';
        ]]></getter>
        <setter><![CDATA[
          this.setAttribute('searchCriteria', val); return val;
        ]]></setter>
      </property>
      <property name="menupopup" readonly="true">
        <getter><![CDATA[
          return document.getAnonymousElementByAttribute(
                   this, 'anonid', 'quick-search-menupopup');
        ]]></getter>
      </property>
      <property name="saveAsVirtualFolder" readonly="true">
        <getter><![CDATA[
          return document.getAnonymousElementByAttribute(
                   this, 'anonid', 'quick-search-save-as-virtual-folder');
        ]]></getter>
      </property>
      <property name="clearButtonHidden">
        <getter><![CDATA[
          return document.getAnonymousElementByAttribute(
                            this, 'anonid', 'quick-search-clearbutton')
                         .getAttribute('clearButtonHidden') == 'true';
        ]]></getter>
        <setter><![CDATA[
          document.getAnonymousElementByAttribute(
                     this, 'anonid', 'quick-search-clearbutton')
                  .setAttribute('clearButtonHidden', val);
          return val;
        ]]></setter>
      </property>

      <property name="state">
        <getter><![CDATA[
          return {
            'mode': this.searchMode,
            'string': this.value
          };
        ]]></getter>
        <setter><![CDATA[
          this.searchMode = val['mode'];
          this.value = val['string'];
        ]]></setter>
      </property>

      // DND Observer
      <field name="searchInputDNDObserver" readonly="true"><![CDATA[
      ({
        inputSearch: this,

        onDrop: function (aEvent, aXferData, aDragSession) {
          try {
            if (aXferData.data) {
              this.inputSearch.focus();
              this.inputSearch.value = aXferData.data;
              // XXX for some reason the input field is _cleared_ even though
              // the search works.
              this.inputSearch.doSearch();
            }
          } catch (e) {
            logException(e);
          }
        },

        getSupportedFlavours: function () {
          var flavourSet = new FlavourSet();
          flavourSet.appendFlavour("text/unicode");
          return flavourSet;
        }
      })
      ]]></field>

      <method name="onTimeout">
        <parameter name="dis"/>
        <body><![CDATA[
        try {
          dis.doSearch();
        } catch (e) {
          logException(e);
        }
        ]]>
        </body>
      </method>
      <method name="updatePopup">
        <body><![CDATA[
        try {
          // disable the create virtual folder menu item if the current radio
          // value is set to Find in message since you can't really  create a VF from find
          // in message
          if (this.searchMode == "global" || this.value == "")
            this.saveAsVirtualFolder.setAttribute('disabled', 'true');
          else
            this.saveAsVirtualFolder.removeAttribute('disabled');

          //let hideQuickSearchModes = this.searchMode == "global" ? "true" : "false";
          //for each (let child in this.menupopup.childNodes) {
          //  if (child.hasAttribute("quicksearch")) {
          //    child.setAttribute("collapsed", hideQuickSearchModes)
          //  }
          //}
        } catch (e) {
          logException(e);
        }
        ]]>
        </body>
      </method>
      <method name="build">
        <body><![CDATA[

        ]]></body>
      </method>

      <method name="observe">
      <parameter name="aSubject"/>
      <parameter name="aTopic"/>
      <parameter name="aData"/>
        <body><![CDATA[
        try {
          if (aTopic == "autocomplete-did-enter-text") {
            let selectedIndex = this.autocompletePopup.selectedIndex;
            let curResult = this.glodaCompleter.curResult;
            if (! curResult)
              return; // autocomplete didn't even finish.
            let row = curResult.getObjectAt(selectedIndex);
            if (row == null)
              return;
            let theQuery = Gloda.newQuery(Gloda.NOUN_MESSAGE);
            let tabmail = document.getElementById("tabmail");
            if (row.fullText) {
              tabmail.openTab("glodaFacet", {
                searcher: new GlodaMsgSearcher(null, row.item, row.andTerms)
              });
            } else {
              if (row.nounDef.name == "tag") {
                theQuery = theQuery.tags(row.item);
              } else if (row.nounDef.name == "identity") {
                theQuery = theQuery.involves(row.item);
              }
              theQuery.orderBy('-date');
              tabmail.openTab("glodaFacet", {
                query: theQuery
              });
            }
          }
        } catch (e) {
          logException(e);
        }
        ]]></body>
      </method>

      <method name="updateEmptyText">
        <body><![CDATA[
        try {
          // extract the label value from the menu item
          let menuItem = this.menupopup.getElementsByAttribute('value',
                          this.searchMode)[0];
          this.emptyText = menuItem.getAttribute('label');
        } catch (e) {
          logException(e);
        }
        ]]></body>
      </method>

      <method name="updateSaveItem">
        <body><![CDATA[
          let disabled = true;
          this.saveAsVirtualFolder.setAttribute("disabled", disabled)
        ]]></body>
      </method>


      <method name="doSearch">
        <body><![CDATA[
          try {
            if (this.searchMode == 'global') // faceted search
            {
              if (this.value) {
                let tabmail = document.getElementById("tabmail");
                // If the current tab is a gloda search tab, reset the value
                //  to the initial search value.  Otherwise, clear it.  This
                //  is the value that 3is going to be saved with the current
                //  tab when we switch back to it next.
                let searchString = this.value;

                if (tabmail.currentTabInfo.mode.name == "glodaFacet") {
                  // we'd rather reuse the existing tab (and somehow do something
                  // smart with any preexisting facet choices, but that's a
                  // bit hard right now, so doing the cheap thing and closing
                  // this tab and starting over
                  tabmail.closeTab();
                }
                this.value = ''; // clear our value, to avoid persistence
                if (gFolderDisplay.view) {
                  // if we started out from a gFolderDisplay.view,
                  // remove existing (non-global) filter from view, to avoid persistence
                  gFolderDisplay.view.search.userTerms = null;
                }
                tabmail.openTab("glodaFacet", {
                  searcher: new GlodaMsgSearcher(null, searchString)
                });
              }
            } else { // quick search
              if (!gFolderDisplay.view)
                return;
              if (! this.value)
                gFolderDisplay.view.search.userTerms = null
              else
                gFolderDisplay.view.search.quickSearch(Number(this.searchMode), this.value);
            }
          } catch (e) {
            logException(e);
          }
        ]]>
        </body>
      </method>

      <method name="changeMode">
      <parameter name="aMenuItem" />
        <body><![CDATA[
          var oldSearchMode = this.searchMode;
          this.searchMode = aMenuItem.value;
          if (oldSearchMode != this.searchMode) // the search mode just changed so we need to redo the quick search
            this.doSearch();
        ]]></body>
      </method>

      <method name="openmenupopup">
        <body>
          <![CDATA[
          try {
            this.menupopup.click();
          } catch (e) {
            logException(e);
          }
          return false;
          ]]>
        </body>
      </method>


      <!--If switching from an "incoming" (Inbox, etc.) type of mail folder,-->
      <!--to an "outbound" (Sent, Drafts etc.)  type, and the current search-->
      <!--type contains 'Sender', then switch it to the equivalent-->
      <!--'Recipient' search type by default. Vice versa when switching from-->
      <!--outbound to incoming folder type.-->
      <!--@param isOutboundFolder  Bool-->
      <!--       true:  switch from an incoming to an outgoing folder-->
      <!--       false: switch from an outgoing to an incoming folder-->
      <method name="folderChanged">
        <parameter name="isOutboundFolder" />
        <body>
          <![CDATA[
            let newSearchMode = null;
            if (isOutboundFolder) {
              if (this.searchMode == QuickSearchConstants.kQuickSearchFromOrSubject)
                this.searchMode = QuickSearchConstants.kQuickSearchRecipientOrSubject;
              else if (this.searchMode == QuickSearchConstants.kQuickSearchFrom)
                this.searchMode = QuickSearchConstants.kQuickSearchRecipient;
            } else {
              if (this.searchMode == QuickSearchConstants.kQuickSearchRecipientOrSubject)
                this.searchMode = QuickSearchConstants.kQuickSearchFromOrSubject;
              else if (this.searchMode == QuickSearchConstants.kQuickSearchRecipient)
                this.searchMode = QuickSearchConstants.kQuickSearchFrom;
            }
          ]]>
        </body>
      </method>
      <!--
        Called by the TabMonitor to make the quick search menu only show options that are relevant for a particular tab.
        In particular, in faceted search results, no real mode choices are available.

         @param showQSItems  Bool
            true:  show quick search-relevant menu items
            false: don't show quick search-relevant menu items
      -->
      <method name="showQuickSearchItems">
        <parameter name="showQSItems" />
        <body>
          <![CDATA[
            for (let i = 0; i < this.menupopup.childNodes.length; i++) {
              let menuitem = this.menupopup.childNodes[i];
              if (menuitem.getAttribute('quicksearchOnly') == 'true')
                menuitem.collapsed = ! showQSItems;
            }
          ]]>
        </body>
      </method>

      <method name="showGlodaItems">
        <parameter name="aEnable"/>
        <body><![CDATA[
        try {
          for (let i = 0; i < this.menupopup.childNodes.length; i++) {
            let menuitem = this.menupopup.childNodes[i];
            if (menuitem.getAttribute('glodaOnly') == 'true') {
              menuitem.collapsed = ! aEnable;
              menuitem.hidden = ! aEnable;
            }
          }
        } catch (e) {
          logException(e);
        }
        ]]>
        </body>
      </method>

    </implementation>
  </binding>

  <binding id="searchBarDropMarker">
    <resources>
      <stylesheet src="chrome://messenger/skin/searchBox.css"/>
    </resources>
    <content popup="_child">
      <children/>
      <xul:stack flex="1">
        <xul:hbox align="center">
          <xul:image class="quick-search-button-image" xbl:inherits="src"
                     chromedir="&locale.dir;"/>
        </xul:hbox>
        <xul:hbox align="center">
          <xul:image class="quick-search-button-dropmarker"/>
        </xul:hbox>
      </xul:stack>
    </content>
  </binding>

</bindings>
